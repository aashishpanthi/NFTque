{"version":3,"file":"static/js/915.3185fe4e.chunk.js","mappings":"inDAIaA,EAAgB,gBAMhBC,EAAb,YACE,a,aACE,sBACA,KAAY,cAAZ,KACA,2C,EAJJ,2BAQA,SAASC,EAAmB,G,IAAEC,EAAAA,EAAAA,kBAAmBC,EAAAA,EAAAA,IAC/C,WAIOA,EAAMC,OAAA,aAAqB,SAAAC,GAAC,OAAIC,OAAJ,WAAnC,G,IAGWC,EAAb,YAIE,c,aACE,cAAM,CAAEL,kBAAmBD,EAAmBO,MAA9C,MACA,SAEA,qBAA0B,4BAA1B,IACA,wBAA6B,+BAA7B,IACA,mBAAwB,0BAAxB,I,EAVJ,qDAaUC,SAAAA,GAINC,KAAA,WAAgB,CAAEC,QAAAA,KAjBtB,wBAoBUC,SAAAA,GAINF,KAAA,WAAgB,CAAEG,QAASC,EAAS,MAxBxC,mBA2BUC,WAKFL,KAAJ,wBACEA,KAAA,6BACAA,KAAA,oDAA0DA,KAA1D,oBACAA,KAAA,uDAA6DA,KAA7D,uBACAA,KAAA,8BAEFA,KAAA,kBAtCJ,0B,MA0CSA,K,0BAaL,M,uBACgB,IAAIM,SAAgB,cAClC,IAAMC,EAAa,WAEjB,+BACAC,EAAO,IAAPA,IAIF,4CAA+C,WAE7C,GACED,OAIJ,uCAEQ,mBAAwBE,EAAQL,EAAhC,OAFR,OAGS,YAEL,sBAAIM,EAAAA,QAIJF,EAAAA,GAHED,UArBQ,OA0BP,SAAAI,GACP,YA3Bc,kBAkChB,OAlCAR,EAAAA,EA8BA,wCAA4C,EAA5C,kBACA,0CAA8C,EAA9C,oBACA,6CAAiD,EAAjD,uBAEO,CAAES,SAAU,EAAZ,sBAAwCT,QAAAA,M,qBA1C1C,2BAA8BU,U,uBAC3B,yCACJ,iBAAsB,CAAEZ,QAAS,SAAYA,cADzC,qBAGN,SAAyB,2BAAzB,Q,oDAVG,EAAKa,sB,uBAC4B,6DAAgD,SAAAC,GAAC,4BAAIA,OAAJ,EAAIA,EAAC,SAAL,QAAjD,eAA9BC,GACN,wBAA6B,IAAIA,EAAsB,EAAvD,W,mDA5CN,MAAAC,GAAA,sBAAAA,KAAA,6BA8FI,uBAAOjB,KAAP,uBA9FJ,MAAAiB,GAAA,sBAAAA,KAAA,4BAkGI,OAAOX,QAAAA,QAAgBN,KAAA,sBAAvB,SAlGJ,MAAAiB,GAAA,sBAAAA,KAAA,4BAsGI,OAAOX,QAAA,QAAgBN,KAAA,sBAAhB,gBAA0D,mBAAgCI,EAAhC,MAtGrE,MAAAa,GAAA,sBAAAA,KAAA,aAyGSC,WACDlB,KAAJ,wBACEA,KAAA,kDAAwDA,KAAxD,kBACAA,KAAA,oDAA0DA,KAA1D,oBACAA,KAAA,uDAA6DA,KAA7D,uBACAA,KAAA,qCA9GN,uB,OAmHIA,KAAA,iB,kBAnHJ,MAAAiB,GAAA,sBAAAA,KAAA","sources":["../node_modules/@web3-react/walletconnect-connector/src/index.ts"],"sourcesContent":["import { IWCEthRpcConnectionOptions } from '@walletconnect/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport { ConnectorUpdate } from '@web3-react/types'\n\nexport const URI_AVAILABLE = 'URI_AVAILABLE'\n\nexport interface WalletConnectConnectorArguments extends IWCEthRpcConnectionOptions {\n  supportedChainIds?: number[]\n}\n\nexport class UserRejectedRequestError extends Error {\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    this.message = 'The user rejected the request.'\n  }\n}\n\nfunction getSupportedChains({ supportedChainIds, rpc }: WalletConnectConnectorArguments): number[] | undefined {\n  if (supportedChainIds) {\n    return supportedChainIds\n  }\n\n  return rpc ? Object.keys(rpc).map(k => Number(k)) : undefined\n}\n\nexport class WalletConnectConnector extends AbstractConnector {\n  public walletConnectProvider?: any\n  private readonly config: WalletConnectConnectorArguments\n\n  constructor(config: WalletConnectConnectorArguments) {\n    super({ supportedChainIds: getSupportedChains(config) })\n    this.config = config\n\n    this.handleChainChanged = this.handleChainChanged.bind(this)\n    this.handleAccountsChanged = this.handleAccountsChanged.bind(this)\n    this.handleDisconnect = this.handleDisconnect.bind(this)\n  }\n\n  private handleChainChanged(chainId: number | string): void {\n    if (__DEV__) {\n      console.log(\"Handling 'chainChanged' event with payload\", chainId)\n    }\n    this.emitUpdate({ chainId })\n  }\n\n  private handleAccountsChanged(accounts: string[]): void {\n    if (__DEV__) {\n      console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n    }\n    this.emitUpdate({ account: accounts[0] })\n  }\n\n  private handleDisconnect(): void {\n    if (__DEV__) {\n      console.log(\"Handling 'disconnect' event\")\n    }\n    // we have to do this because of a @walletconnect/web3-provider bug\n    if (this.walletConnectProvider) {\n      this.walletConnectProvider.stop()\n      this.walletConnectProvider.removeListener('chainChanged', this.handleChainChanged)\n      this.walletConnectProvider.removeListener('accountsChanged', this.handleAccountsChanged)\n      this.walletConnectProvider = undefined\n    }\n    this.emitDeactivate()\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.walletConnectProvider) {\n      const WalletConnectProvider = await import('@walletconnect/ethereum-provider').then(m => m?.default ?? m)\n      this.walletConnectProvider = new WalletConnectProvider(this.config)\n    }\n\n    // ensure that the uri is going to be available, and emit an event if there's a new uri\n    if (!this.walletConnectProvider.wc.connected) {\n      await this.walletConnectProvider.wc.createSession(\n        this.config.chainId ? { chainId: this.config.chainId } : undefined\n      )\n      this.emit(URI_AVAILABLE, this.walletConnectProvider.wc.uri)\n    }\n\n    let account: string\n    account = await new Promise<string>((resolve, reject) => {\n      const userReject = () => {\n        // Erase the provider manually\n        this.walletConnectProvider = undefined\n        reject(new UserRejectedRequestError())\n      }\n\n      // Workaround to bubble up the error when user reject the connection\n      this.walletConnectProvider.wc.on('disconnect', () => {\n        // Check provider has not been enabled to prevent this event callback from being called in the future\n        if (!account) {\n          userReject()\n        }\n      })\n\n      this.walletConnectProvider\n        .enable()\n        .then((accounts: string[]) => resolve(accounts[0]))\n        .catch((error: Error): void => {\n          // TODO ideally this would be a better check\n          if (error.message === 'User closed modal') {\n            userReject()\n            return\n          }\n          reject(error)\n        })\n    }).catch(err => {\n      throw err\n    })\n\n    this.walletConnectProvider.on('disconnect', this.handleDisconnect)\n    this.walletConnectProvider.on('chainChanged', this.handleChainChanged)\n    this.walletConnectProvider.on('accountsChanged', this.handleAccountsChanged)\n\n    return { provider: this.walletConnectProvider, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.walletConnectProvider\n  }\n\n  public async getChainId(): Promise<number | string> {\n    return Promise.resolve(this.walletConnectProvider.chainId)\n  }\n\n  public async getAccount(): Promise<null | string> {\n    return Promise.resolve(this.walletConnectProvider.accounts).then((accounts: string[]): string => accounts[0])\n  }\n\n  public deactivate() {\n    if (this.walletConnectProvider) {\n      this.walletConnectProvider.removeListener('disconnect', this.handleDisconnect)\n      this.walletConnectProvider.removeListener('chainChanged', this.handleChainChanged)\n      this.walletConnectProvider.removeListener('accountsChanged', this.handleAccountsChanged)\n      this.walletConnectProvider.disconnect()\n    }\n  }\n\n  public async close() {\n    this.emitDeactivate()\n  }\n}\n"],"names":["URI_AVAILABLE","UserRejectedRequestError","getSupportedChains","supportedChainIds","rpc","Object","k","Number","WalletConnectConnector","config","handleChainChanged","this","chainId","handleAccountsChanged","account","accounts","handleDisconnect","Promise","userReject","reject","resolve","error","err","provider","connected","walletConnectProvider","m","WalletConnectProvider","e","deactivate"],"sourceRoot":""}